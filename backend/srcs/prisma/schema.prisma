// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//# ----------------------------- General_settings ----------------------------- #
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//# ----------------------------------- User ----------------------------------- #
model User {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username String  @unique
  email    String  @unique
  password String
  avatar   String?
  status   Status? @default(DISCONNECTED)
  balance  Int?

  hasBloqued  Bloqued[]     @relation("user")
  isBloqued   Bloqued[]     @relation("bloqued")
  friendOne   FriendShip[]  @relation("friendOne")
  friendTwo   FriendShip[]  @relation("friendTwo")
  winner      Match[]       @relation("winner")
  playerOne   Match[]       @relation("playerOne")
  playerTwo   Match[]       @relation("playerTwo")
  user        UserItem[]    @relation("owner")
  admin       Room[]        @relation("admin")
  participant Participant[]
  banned      Banned[]
  sender      Message[]
}

enum Status {
  DISCONNECTED
  CONNECTED
  IN_GAME
  AWAY
}

model Bloqued {
  id        String @id @default(uuid())
  userId    String @db.Uuid
  bloquedId String @db.Uuid
  user      User   @relation("user", fields: [userId], references: [id])
  bloqued   User   @relation("bloqued", fields: [bloquedId], references: [id])
}

model FriendShip {
  id        String @id @default(uuid())
  userOneId String @db.Uuid
  userTwoId String @db.Uuid
  friendOne User   @relation("friendOne", fields: [userOneId], references: [id])
  friendTwo User   @relation("friendTwo", fields: [userTwoId], references: [id])
}

//# ----------------------------------- Match ---------------------------------- #
model Match {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @default(now())
  duration    DateTime
  winnerId    String   @db.Uuid
  playerOneId String   @db.Uuid
  playerTwoId String   @db.Uuid
  winner      User     @relation("winner", fields: [winnerId], references: [id])
  playerOne   User     @relation("playerOne", fields: [playerOneId], references: [id])
  playerTwo   User     @relation("playerTwo", fields: [playerTwoId], references: [id])
}

//# ----------------------------------- Item ---------------------------------- #
model Item {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String
  price Int
  image String

  item UserItem[]
}

model UserItem {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String @db.Uuid
  itemsId String @db.Uuid
  user    User   @relation("owner", fields: [userId], references: [id])
  items   Item   @relation(fields: [itemsId], references: [id])
}

//# ------------------------------------ Chat ------------------------------------- #
model Room {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String @unique
  type    Int
  adminId String @db.Uuid
  admin   User   @relation("admin", fields: [adminId], references: [id])

  room    Participant[]
  roomBan Banned[]
  roomMsg Message[]
}

model Participant {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role   Role   @default(BASIC)
  roomId String @db.Uuid
  userId String @db.Uuid
  room   Room   @relation(fields: [roomId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

enum Role {
  BASIC
  ADMIN
}

model Banned {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId String @db.Uuid
  userId String @db.Uuid
  room   Room   @relation(fields: [roomId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Message {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content  String
  date     DateTime @default(now())
  senderId String   @db.Uuid
  roomId   String   @db.Uuid
  sender   User     @relation(fields: [senderId], references: [id])
  room     Room     @relation(fields: [roomId], references: [id])
}
