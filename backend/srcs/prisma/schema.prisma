generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String             @unique
  email            String             @unique
  password         String
  avatar           String?
  refreshToken     String?
  type             Type               @default(LOCAL)
  status           Status?            @default(DISCONNECTED)
  balance          Int?               @default(0)
  sender           Message[]
  participant      Participant[]
  lobbyParticipant LobbyParticipant[]
  lobbySpectator   LobbySpectator[]
  user             UserItem[]         @relation("ownerItem")
  lobbyOwner       Lobby[]            @relation("lobbyOwner")
  friends          User[]             @relation("friends")
  symmetricFriends User[]             @relation("friends")
  isBloqued        User[]             @relation("bloqued")
  hasBloqued       User[]             @relation("bloqued")
  playerOne        Match[]            @relation("playerOne")
  playerTwo        Match[]            @relation("playerTwo")
  winner           Match[]            @relation("winner")
  isBanned         Room[]             @relation("Banned")
  roomOwner        Room[]             @relation("owner")
}

//================== GAME =================
model Lobby {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId     String             @unique @db.Uuid
  nbPlayers   Int                @default(2)
  maxDuration Int                @default(180)
  mode        Mode               @default(CLASSIC)
  map         MapName            @default(CLASSIC)
  owner       User               @relation("lobbyOwner", fields: [ownerId], references: [id])
  players     LobbyParticipant[]
  spectators  LobbySpectator[]
}

model LobbyParticipant {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lobbyId String @db.Uuid
  userId  String @db.Uuid
  lobby   Lobby  @relation(fields: [lobbyId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model LobbySpectator {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lobbyId String @db.Uuid
  userId  String @db.Uuid
  lobby   Lobby  @relation(fields: [lobbyId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

enum MapName {
  CLASSIC
}

enum Mode {
  CLASSIC
  CHAMPIONS
  GRAVITY
}

model Match {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @default(now())
  duration    DateTime
  winnerId    String   @db.Uuid
  playerOneId String   @db.Uuid
  playerTwoId String   @db.Uuid
  playerOne   User     @relation("playerOne", fields: [playerOneId], references: [id])
  playerTwo   User     @relation("playerTwo", fields: [playerTwoId], references: [id])
  winner      User     @relation("winner", fields: [winnerId], references: [id])
}

//================== SHOP =======================
model Item {
  id    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String
  price Int
  image String
  item  UserItem[]
}

model UserItem {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String @db.Uuid
  itemsId String @db.Uuid
  items   Item   @relation(fields: [itemsId], references: [id])
  user    User   @relation("ownerItem", fields: [userId], references: [id])
}

model Room {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String        @unique
  password         String
  avatar           String
  type             Int
  ownerId          String        @db.Uuid
  isPrivate        Boolean
  userBanSymmetric User[]        @relation("Banned")
  roomMsg          Message[]
  room             Participant[]
  owner            User          @relation("owner", fields: [ownerId], references: [id])
}

model Participant {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role     Role     @default(BASIC)
  roomId   String   @db.Uuid
  userId   String   @db.Uuid
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Message {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content  String
  date     DateTime @default(now())
  senderId String   @db.Uuid
  roomId   String   @db.Uuid
  room     Room     @relation(fields: [roomId], references: [id])
  sender   User     @relation(fields: [senderId], references: [id])
}

enum Type {
  LOCAL
  GOOGLE
  API42
}

enum Status {
  DISCONNECTED
  CONNECTED
  GAME
  LOBBY
  AWAY
}

enum Role {
  BASIC
  ADMIN
  OWNER
}
