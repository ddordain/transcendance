generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String        @unique
  email            String        @unique
  password         String
  avatar           String?
  refreshToken     String?
  type             Type          @default(LOCAL)
  status           Status?       @default(DISCONNECTED)
  balance          Int?          @default(0)
  preferences      Preference?
  sender           Message[]
  participant      Participant[]
  items            Item[]        @relation("itemOwner")
  lobbyOwner       Lobby[]       @relation("lobbyOwner")
  lobbyParticipant Lobby[]       @relation("lobbyParticipant")
  lobbySpectator   Lobby[]       @relation("lobbySpectator")
  friends          User[]        @relation("friends")
  symmetricFriends User[]        @relation("friends")
  isBloqued        User[]        @relation("bloqued")
  hasBloqued       User[]        @relation("bloqued")
  playerOne        Match[]       @relation("playerOne")
  playerTwo        Match[]       @relation("playerTwo")
  winner           Match[]       @relation("winner")
  isBanned         Room[]        @relation("Banned")
  roomOwner        Room[]        @relation("owner")
}

model Preference {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @unique @db.Uuid
  visibility VisibilityMode
}

enum VisibilityMode {
  VISIBLE
  INVISIBLE
  AWAY
}

//================== GAME =================
model Lobby {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId     String  @unique @db.Uuid
  nbPlayers   Int     @default(2)
  maxDuration Int     @default(180)
  mode        Mode    @default(CLASSIC)
  map         MapName @default(CLASSIC)
  owner       User    @relation("lobbyOwner", fields: [ownerId], references: [id])
  players     User[]  @relation("lobbyParticipant")
  spectators  User[]  @relation("lobbySpectator")
}

enum MapName {
  CLASSIC
}

enum Mode {
  CLASSIC
  CHAMPIONS
  GRAVITY
}

model Match {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @default(now())
  duration    DateTime
  winnerId    String   @db.Uuid
  playerOneId String   @db.Uuid
  playerTwoId String   @db.Uuid
  playerOne   User     @relation("playerOne", fields: [playerOneId], references: [id])
  playerTwo   User     @relation("playerTwo", fields: [playerTwoId], references: [id])
  winner      User     @relation("winner", fields: [winnerId], references: [id])
}

//================== SHOP =======================
model Item {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String
  price  Int
  image  String
  owners User[] @relation("itemOwner")
}

model Room {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String        @unique
  password         String
  avatar           String
  type             Int
  ownerId          String        @db.Uuid
  isPrivate        Boolean
  isDm             Boolean
  userBanSymmetric User[]        @relation("Banned")
  roomMsg          Message[]
  room             Participant[]
  owner            User          @relation("owner", fields: [ownerId], references: [id], onDelete: NoAction)
}

model Participant {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role     Role     @default(BASIC)
  roomId   String   @db.Uuid
  userId   String   @db.Uuid
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id], onDelete: NoAction)
  user     User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Message {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content  String
  date     DateTime @default(now())
  senderId String   @db.Uuid
  roomId   String   @db.Uuid
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: NoAction)
}

enum Type {
  LOCAL
  GOOGLE
  API42
}

enum Status {
  DISCONNECTED
  CONNECTED
  GAME
  LOBBY
}

enum Role {
  BASIC
  ADMIN
  OWNER
}
